import heapq
def astar(graph, start, goal, h):
    open_set=[(h(start),0,start,None)]
    g={start:0}
    parent={}
    while open_set:
        f,c,node,par=heapq.heappop(open_set)
        if node in parent: continue
        parent[node]=par
        if node==goal:
            path=[]
            while node is not None:
                path.append(node)
                node=parent[node]
            return path[::-1],g[goal]
        for nbr,cost in graph[node]:
            nc=c+cost
            if nbr not in g or nc<g[nbr]:
                g[nbr]=nc
                heapq.heappush(open_set,(nc+h(nbr),nc,nbr,node))
    return None,None

# example graph (adjacency list: node -> list of (neighbor, edge_cost))
graph={
    'S':[('A',1),('B',4)],
    'A':[('B',2),('C',5),('D',12)],
    'B':[('C',2)],
    'C':[('G',3)],
    'D':[('G',3)],
    'G':[]
}

heuristic={'S':7,'A':6,'B':2,'C':1,'D':3,'G':0}
h=lambda n:heuristic[n]

path,cost=astar(graph,'S','G',h)
print("Path:",path)
print("Cost:",cost)
