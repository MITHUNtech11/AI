import numpy as np

class FFNN:
    def __init__(self, in_size, hidden_size, out_size, lr=0.1):
        self.W1 = np.random.randn(in_size, hidden_size)
        self.b1 = np.zeros((1, hidden_size))
        self.W2 = np.random.randn(hidden_size, out_size)
        self.b2 = np.zeros((1, out_size))
        self.lr = lr

    def sigmoid(self, z):        return 1 / (1 + np.exp(-z))
    def dsigmoid(self, a):       return a * (1 - a)

    def forward(self, X):
        z1 = X @ self.W1 + self.b1
        a1 = self.sigmoid(z1)
        z2 = a1 @ self.W2 + self.b2
        a2 = self.sigmoid(z2)
        return z1, a1, z2, a2

    def backward(self, X, y, z1, a1, z2, a2):
        m = y.shape[0]
        dz2 = a2 - y
        dW2 = a1.T @ dz2 / m
        db2 = dz2.mean(axis=0, keepdims=True)
        dz1 = (dz2 @ self.W2.T) * self.dsigmoid(a1)
        dW1 = X.T @ dz1 / m
        db1 = dz1.mean(axis=0, keepdims=True)
        self.W2 -= self.lr * dW2
        self.b2 -= self.lr * db2
        self.W1 -= self.lr * dW1
        self.b1 -= self.lr * db1

    def train(self, X, y, epochs=10000):
        for _ in range(epochs):
            z1,a1,z2,a2 = self.forward(X)
            self.backward(X, y, z1, a1, z2, a2)

    def predict(self, X):
        _,_,_,a2 = self.forward(X)
        return (a2 > 0.5).astype(int)

# XOR data
X = np.array([[0,0],[0,1],[1,0],[1,1]])
y = np.array([[0],[1],[1],[0]])

net = FFNN(in_size=2, hidden_size=4, out_size=1, lr=0.5)
net.train(X, y)
print("Predictions:", net.predict(X).ravel())
