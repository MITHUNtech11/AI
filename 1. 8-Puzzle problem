from collections import deque
import heapq

def neighbors(state):
    i = state.index(0)
    r, c = divmod(i, 3)
    moves = []
    for dr, dc in [(-1,0),(1,0),(0,-1),(0,1)]:
        nr, nc = r+dr, c+dc
        if 0<=nr<3 and 0<=nc<3:
            j = nr*3+nc
            lst = list(state)
            lst[i], lst[j] = lst[j], lst[i]
            moves.append(tuple(lst))
    return moves

def manhattan(s, g):
    return sum(abs((s.index(v)//3)-(g.index(v)//3))+abs((s.index(v)%3)-(g.index(v)%3)) for v in range(1,9))

def astar(start, goal):
    pq=[(manhattan(start,goal),0,start)]
    g={start:0}
    parent={start:None}
    while pq:
        f,cost,state=heapq.heappop(pq)
        if state==goal:
            path=[]
            while state:
                path.append(state)
                state=parent[state]
            return path[::-1]
        for nb in neighbors(state):
            nc=cost+1
            if nb not in g or nc<g[nb]:
                g[nb]=nc
                parent[nb]=state
                heapq.heappush(pq,(nc+manhattan(nb,goal),nc,nb))

start=(1,2,3,4,0,5,6,7,8)
goal=(1,2,3,4,5,6,7,8,0)
path=astar(start,goal)
print("Moves:",len(path)-1)
for s in path:
    for i in range(0,9,3): print(s[i:i+3])
    print()
